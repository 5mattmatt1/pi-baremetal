/* Linker script for kernel */

/* Define the kernel entry point. Needed to prevent ld's -gc-sections option
 * getting rid of everything
 */
ENTRY(_start)

/* Define the memory as starting at 0x8000, and being a megabyte long
 * (shouldn't need to be more than this)
 */

MEMORY
{
	kernel : org = 0x8000, len = 1M
	vectors : org = 0, len = 0x1000
}

/* Output kernel code (.text) and data (.data, .rodata, .bss) into kernel
 * address space, along with the interrupt vector code in the intvec section
 *
 * Make sure start.o comes first, so the entry point is at the start of the
 * file
 *
 * intvec needs to be linked so it is located in the same memory as the rest
 * of the kernel and data, but can be copied to 0x00000000 and run from there
 *
 * Puts .bss in the middle to force the final binary kernel to contain it;
 * this means it will be set to 0 rather than left to whatever is in the
 * memory beforehand. This isn't very efficient.
 */

SECTIONS
{
	.text : { start.o(.text) *(.text*) } >kernel
	_intvec = . ;
	intvec : AT(_intvec) { intvec.o(intvec) } >vectors
	.rodata (_intvec + SIZEOF(intvec)) : { *(.rodata) } >kernel
	.bss : { *(.bss) } >kernel
	.data : { *(.data) } >kernel
}
